{"ast":null,"code":"import { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { PressResponderContext as $ae1eeba8b9eafd08$export$5165eccb35aaadb5 } from \"./context.mjs\";\nimport { preventFocus as $8a9cb279dc87e130$export$cabe61c495ee3649 } from \"./utils.mjs\";\nimport { _ as $7mdmh$_ } from \"@swc/helpers/_/_class_private_field_get\";\nimport { _ as $7mdmh$_1 } from \"@swc/helpers/_/_class_private_field_init\";\nimport { _ as $7mdmh$_2 } from \"@swc/helpers/_/_class_private_field_set\";\nimport { mergeProps as $7mdmh$mergeProps, useSyncRef as $7mdmh$useSyncRef, useGlobalListeners as $7mdmh$useGlobalListeners, useEffectEvent as $7mdmh$useEffectEvent, nodeContains as $7mdmh$nodeContains, getEventTarget as $7mdmh$getEventTarget, getOwnerDocument as $7mdmh$getOwnerDocument, chain as $7mdmh$chain, isMac as $7mdmh$isMac, openLink as $7mdmh$openLink, isVirtualClick as $7mdmh$isVirtualClick, isVirtualPointerEvent as $7mdmh$isVirtualPointerEvent, focusWithoutScrolling as $7mdmh$focusWithoutScrolling, getOwnerWindow as $7mdmh$getOwnerWindow } from \"@react-aria/utils\";\nimport { flushSync as $7mdmh$flushSync } from \"react-dom\";\nimport { useContext as $7mdmh$useContext, useState as $7mdmh$useState, useRef as $7mdmh$useRef, useMemo as $7mdmh$useMemo, useEffect as $7mdmh$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = (0, $7mdmh$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = (0, $7mdmh$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $7mdmh$useSyncRef)(context, props.ref);\n  return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n  continuePropagation() {\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n  }\n  get shouldStopPropagation() {\n    return (0, $7mdmh$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n  }\n  constructor(type, pointerType, originalEvent, state) {\n    (0, $7mdmh$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n      writable: true,\n      value: void 0\n    });\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n    var _state_target;\n    let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;\n    const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();\n    let x,\n      y = 0;\n    let clientX,\n      clientY = null;\n    if (originalEvent.clientX != null && originalEvent.clientY != null) {\n      clientX = originalEvent.clientX;\n      clientY = originalEvent.clientY;\n    }\n    if (rect) {\n      if (clientX != null && clientY != null) {\n        x = clientX - rect.left;\n        y = clientY - rect.top;\n      } else {\n        x = rect.width / 2;\n        y = rect.height / 2;\n      }\n    }\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n    this.x = x;\n    this.y = y;\n  }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol('linkClicked');\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let [isPressed, setPressed] = (0, $7mdmh$useState)(false);\n  let ref = (0, $7mdmh$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null,\n    disposables: []\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $7mdmh$useGlobalListeners)();\n  let triggerPressStart = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) return false;\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(true);\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n  let triggerPressEnd = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) return false;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(false);\n    setPressed(false);\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n    }\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n  let triggerPressUp = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled) return false;\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n    return true;\n  });\n  let cancel = (0, $7mdmh$useEffectEvent)(e => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.didFirePressStart && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n      for (let dispose of state.disposables) dispose();\n      state.disposables = [];\n    }\n  });\n  let cancelOnPointerExit = (0, $7mdmh$useEffectEvent)(e => {\n    if (shouldCancelOnPointerExit) cancel(e);\n  });\n  let pressProps = (0, $7mdmh$useMemo)(() => {\n    let state = ref.current;\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && (0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) {\n          var _state_metaKeyEvents;\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $7mdmh$getEventTarget)(e.nativeEvent), e.key)) e.preventDefault();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            state.pointerType = 'keyboard';\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = e => {\n              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && (0, $7mdmh$nodeContains)(originalTarget, (0, $7mdmh$getEventTarget)(e)) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            };\n            addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'keyup', (0, $7mdmh$chain)(pressUp, onKeyUp), true);\n          }\n          if (shouldStopPropagation) e.stopPropagation();\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && (0, $7mdmh$isMac)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);\n        } else if (e.key === 'Meta') state.metaKeyEvents = new Map();\n      },\n      onClick(e) {\n        if (e && !(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $7mdmh$openLink).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || (0, $7mdmh$isVirtualClick)(e.nativeEvent))) {\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          } else if (state.isPressed && state.pointerType !== 'keyboard') {\n            let pointerType = state.pointerType || e.nativeEvent.pointerType || 'virtual';\n            shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType, true);\n            state.isOverTarget = false;\n            cancel(e);\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          if (shouldStopPropagation) e.stopPropagation();\n        }\n      }\n    };\n    let onKeyUp = e => {\n      var _state_metaKeyEvents;\n      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        var _state_metaKeyEvents1;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $7mdmh$getEventTarget)(e), e.key)) e.preventDefault();\n        let target = (0, $7mdmh$getEventTarget)(e);\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', (0, $7mdmh$nodeContains)(state.target, (0, $7mdmh$getEventTarget)(e)));\n        removeAllGlobalListeners();\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && (0, $7mdmh$nodeContains)(state.target, target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n          (0, $7mdmh$openLink)(state.target, e, false);\n        }\n        state.isPressed = false;\n        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n      } else if (e.key === 'Meta' && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n        var _state_target;\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent('keyup', event));\n      }\n    };\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ((0, $7mdmh$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n        state.pointerType = e.pointerType;\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          // Release pointer capture so that touch interactions can leave the original target.\n          // This enables onPointerLeave and onPointerEnter to fire.\n          let target = (0, $7mdmh$getEventTarget)(e.nativeEvent);\n          if ('releasePointerCapture' in target) target.releasePointerCapture(e.pointerId);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseDown = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        if (e.button === 0) {\n          if (preventFocusOnPress) {\n            let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);\n            if (dispose) state.disposables.push(dispose);\n          }\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent)) || state.pointerType === 'virtual') return;\n        // Only handle left clicks\n        if (e.button === 0) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      pressProps.onPointerEnter = e => {\n        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = true;\n          triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n        }\n      };\n      pressProps.onPointerLeave = e => {\n        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if ((0, $7mdmh$nodeContains)(state.target, (0, $7mdmh$getEventTarget)(e)) && state.pointerType != null) {\n            // Wait for onClick to fire onPress. This avoids browser issues when the DOM\n            // is mutated between onPointerUp and onClick, and is more compatible with third party libraries.\n            // https://github.com/adobe/react-spectrum/issues/1513\n            // https://issues.chromium.org/issues/40732224\n            // However, iOS and Android do not focus or fire onClick after a long press.\n            // We work around this by triggering a click ourselves after a timeout.\n            // This timeout is canceled during the click event in case the real one fires first.\n            // The timeout must be at least 32ms, because Safari on iOS delays the click event on\n            // non-form elements without certain ARIA roles (for hover emulation).\n            // https://github.com/WebKit/WebKit/blob/dccfae42bb29bd4bdef052e469f604a9387241c0/Source/WebKit/WebProcess/WebPage/ios/WebPageIOS.mm#L875-L892\n            let clicked = false;\n            let timeout = setTimeout(() => {\n              if (state.isPressed && state.target instanceof HTMLElement) {\n                if (clicked) cancel(e);else {\n                  (0, $7mdmh$focusWithoutScrolling)(state.target);\n                  state.target.click();\n                }\n              }\n            }, 80);\n            // Use a capturing listener to track if a click occurred.\n            // If stopPropagation is called it may never reach our handler.\n            addGlobalListener(e.currentTarget, 'click', () => clicked = true, true);\n            state.disposables.push(() => clearTimeout(timeout));\n          } else cancel(e);\n          // Ignore subsequent onPointerLeave event before onClick on touch devices.\n          state.isOverTarget = false;\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      // NOTE: this fallback branch is almost entirely used by unit tests.\n      // All browsers now support pointer events, but JSDOM still does not.\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $7mdmh$isVirtualClick)(e.nativeEvent) ? 'virtual' : 'mouse';\n        // Flush sync so that focus moved during react re-renders occurs before we yield back to the browser.\n        let shouldStopPropagation = (0, $7mdmh$flushSync)(() => triggerPressStart(e, state.pointerType));\n        if (shouldStopPropagation) e.stopPropagation();\n        if (preventFocusOnPress) {\n          let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);\n          if (dispose) state.disposables.push(dispose);\n        }\n        addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseLeave = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseUp = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || 'mouse');\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if (state.target && state.target.contains(e.target) && state.pointerType != null) ;else cancel(e);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        let shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerWindow)(e.currentTarget), 'scroll', onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onTouchEnd = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);\n        if (shouldStopPropagation) e.stopPropagation();\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));\n      };\n      let onScroll = e => {\n        if (state.isPressed && (0, $7mdmh$nodeContains)((0, $7mdmh$getEventTarget)(e), state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!(0, $7mdmh$nodeContains)(e.currentTarget, (0, $7mdmh$getEventTarget)(e.nativeEvent))) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress, cancel, cancelOnPointerExit, triggerPressEnd, triggerPressStart, triggerPressUp]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  (0, $7mdmh$useEffect)(() => {\n    let state = ref.current;\n    return () => {\n      var _state_target;\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_state_target = state.target) !== null && _state_target !== void 0 ? _state_target : undefined);\n      for (let dispose of state.disposables) dispose();\n      state.disposables = [];\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $7mdmh$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLTextAreaElement || element.isContentEditable) &&\n  // Links should only trigger with Enter key\n  !((role === 'link' || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createTouchEvent(target, e) {\n  let clientX = 0;\n  let clientY = 0;\n  if (e.targetTouches && e.targetTouches.length === 1) {\n    clientX = e.targetTouches[0].clientX;\n    clientY = e.targetTouches[0].clientY;\n  }\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  let clientX = e.clientX;\n  let clientY = e.clientY;\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) offsetX = point.width / 2;else if (point.radiusX !== undefined) offsetX = point.radiusX;\n  if (point.height !== undefined) offsetY = point.height / 2;else if (point.radiusY !== undefined) offsetY = point.radiusY;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {\n  if (target instanceof HTMLInputElement) return false;\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit' && target.type !== 'reset';\n  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nexport { $f6c31cce2adf654f$export$45712eceda6fad21 as usePress };","map":{"version":3,"names":["$f6c31cce2adf654f$var$usePressResponderContext","props","context","$7mdmh$useContext","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","register","contextProps","$7mdmh$mergeProps","$7mdmh$useSyncRef","ref","$f6c31cce2adf654f$var$_shouldStopPropagation","WeakMap","$f6c31cce2adf654f$var$PressEvent","continuePropagation","shouldStopPropagation","$7mdmh$_","constructor","type","pointerType","originalEvent","state","$7mdmh$_1","_state_target","currentTarget","target","rect","getBoundingClientRect","x","y","clientX","clientY","left","top","width","height","shiftKey","metaKey","ctrlKey","altKey","$f6c31cce2adf654f$var$LINK_CLICKED","Symbol","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","setPressed","$7mdmh$useState","$7mdmh$useRef","ignoreEmulatedMouseEvents","didFirePressStart","isTriggeringEvent","activePointerId","isOverTarget","disposables","addGlobalListener","removeAllGlobalListeners","$7mdmh$useGlobalListeners","triggerPressStart","$7mdmh$useEffectEvent","current","event","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","$14c0b72509d70225$export$b0d6fa1ab32e3295","dispose","cancelOnPointerExit","pressProps","$7mdmh$useMemo","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","$7mdmh$nodeContains","$7mdmh$getEventTarget","_state_metaKeyEvents","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","repeat","originalTarget","pressUp","$7mdmh$getOwnerDocument","$7mdmh$chain","onKeyUp","stopPropagation","$7mdmh$isMac","metaKeyEvents","set","Map","onClick","button","$7mdmh$openLink","isOpening","$7mdmh$isVirtualClick","stopPressStart","stopPressUp","stopPressEnd","_state_metaKeyEvents1","$f6c31cce2adf654f$var$isHTMLAnchorLink","delete","size","events","undefined","values","dispatchEvent","KeyboardEvent","PointerEvent","onPointerDown","$7mdmh$isVirtualPointerEvent","pointerId","$14c0b72509d70225$export$16a4697467175487","releasePointerCapture","onPointerUp","onPointerCancel","onMouseDown","$8a9cb279dc87e130$export$cabe61c495ee3649","push","onPointerEnter","onPointerLeave","clicked","timeout","setTimeout","HTMLElement","$7mdmh$focusWithoutScrolling","click","clearTimeout","onDragStart","$7mdmh$flushSync","onMouseUp","onMouseEnter","onMouseLeave","contains","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","$f6c31cce2adf654f$var$createTouchEvent","$7mdmh$getOwnerWindow","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","$f6c31cce2adf654f$var$isOverTarget","onTouchEnd","onTouchCancel","$7mdmh$useEffect","tagName","hasAttribute","code","element","role","getAttribute","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","offsetY","radiusX","radiusY","right","bottom","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","pointRect","$f6c31cce2adf654f$var$shouldPreventDefaultUp","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","has"],"sources":["/Users/zeynepbas/Documents/GitHub/stack-diyet/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {\n  chain,\n  focusWithoutScrolling,\n  getEventTarget,\n  getOwnerDocument,\n  getOwnerWindow,\n  isMac,\n  isVirtualClick,\n  isVirtualPointerEvent,\n  mergeProps,\n  nodeContains,\n  openLink,\n  useEffectEvent,\n  useGlobalListeners,\n  useSyncRef\n} from '@react-aria/utils';\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PressEvent as IPressEvent, PointerType, PressEvents, RefObject} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport {PressResponderContext} from './context';\nimport {preventFocus} from './utils';\nimport {TouchEvent as RTouchEvent, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element | null>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  didFirePressStart: boolean,\n  isTriggeringEvent: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType | null,\n  userSelect?: string,\n  metaKeyEvents?: Map<string, KeyboardEvent>,\n  disposables: Array<() => void>\n}\n\ninterface EventBase {\n  currentTarget: EventTarget | null,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean,\n  clientX?: number,\n  clientY?: number,\n  targetTouches?: Array<{clientX?: number, clientY?: number}>\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\nclass PressEvent implements IPressEvent {\n  type: IPressEvent['type'];\n  pointerType: PointerType;\n  target: Element;\n  shiftKey: boolean;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  altKey: boolean;\n  x: number;\n  y: number;\n  #shouldStopPropagation = true;\n\n  constructor(type: IPressEvent['type'], pointerType: PointerType, originalEvent: EventBase, state?: PressState) {\n    let currentTarget = state?.target ?? originalEvent.currentTarget;\n    const rect: DOMRect | undefined = (currentTarget as Element)?.getBoundingClientRect();\n    let x, y = 0;\n    let clientX, clientY: number | null = null;\n    if (originalEvent.clientX != null && originalEvent.clientY != null) {\n      clientX = originalEvent.clientX;\n      clientY = originalEvent.clientY;\n    }\n    if (rect) {\n      if (clientX != null && clientY != null) {\n        x = clientX - rect.left;\n        y = clientY - rect.top;\n      } else {\n        x = rect.width / 2;\n        y = rect.height / 2;\n      }\n    }\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget as Element;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n    this.x = x;\n    this.y = y;\n  }\n\n  continuePropagation() {\n    this.#shouldStopPropagation = false;\n  }\n\n  get shouldStopPropagation() {\n    return this.#shouldStopPropagation;\n  }\n}\n\nconst LINK_CLICKED = Symbol('linkClicked');\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null,\n    disposables: []\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let triggerPressStart = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) {\n      return false;\n    }\n\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(true);\n    }\n\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n\n  let triggerPressEnd = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) {\n      return false;\n    }\n\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(false);\n    }\n\n    setPressed(false);\n\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation &&= event.shouldStopPropagation;\n    }\n\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n\n  let triggerPressUp = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled) {\n      return false;\n    }\n\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n\n    return true;\n  });\n\n  let cancel = useEffectEvent((e: EventBase) => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.didFirePressStart && state.pointerType != null) {\n        triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n      }\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(state.target);\n      }\n      for (let dispose of state.disposables) {\n        dispose();\n      }\n      state.disposables = [];\n    }\n  });\n\n  let cancelOnPointerExit = useEffectEvent((e: EventBase) => {\n    if (shouldCancelOnPointerExit) {\n      cancel(e);\n    }\n  });\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          if (shouldPreventDefaultKeyboard(getEventTarget(e.nativeEvent), e.key)) {\n            e.preventDefault();\n          }\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            state.pointerType = 'keyboard';\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = (e) => {\n              if (isValidKeyboardEvent(e, originalTarget) && !e.repeat && nodeContains(originalTarget, getEventTarget(e)) && state.target) {\n                triggerPressUp(createEvent(state.target, e), 'keyboard');\n              }\n            };\n\n            addGlobalListener(getOwnerDocument(e.currentTarget), 'keyup', chain(pressUp, onKeyUp), true);\n          }\n\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && isMac()) {\n            state.metaKeyEvents?.set(e.key, e.nativeEvent);\n          }\n        } else if (e.key === 'Meta') {\n          state.metaKeyEvents = new Map();\n        }\n      },\n      onClick(e) {\n        if (e && !nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(openLink as any).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) {\n            e.preventDefault();\n          }\n          \n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          } else if (state.isPressed && state.pointerType !== 'keyboard') {\n            let pointerType = state.pointerType || (e.nativeEvent as PointerEvent).pointerType as PointerType || 'virtual';\n            shouldStopPropagation = triggerPressEnd(createEvent(e.currentTarget, e), pointerType, true);\n            state.isOverTarget = false;\n            cancel(e);\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && state.target && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(getEventTarget(e), e.key)) {\n          e.preventDefault();\n        }\n\n        let target = getEventTarget(e);\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', nodeContains(state.target, getEventTarget(e)));\n        removeAllGlobalListeners();\n\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && isHTMLAnchorLink(state.target) && nodeContains(state.target, target) && !e[LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[LINK_CLICKED] = true;\n          openLink(state.target, e, false);\n        }\n\n        state.isPressed = false;\n        state.metaKeyEvents?.delete(e.key);\n      } else if (e.key === 'Meta' && state.metaKeyEvents?.size) {\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) {\n          state.target?.dispatchEvent(new KeyboardEvent('keyup', event));\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        state.pointerType = e.pointerType;\n\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget as FocusableElement;\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n\n          // Release pointer capture so that touch interactions can leave the original target.\n          // This enables onPointerLeave and onPointerEnter to fire.\n          let target = getEventTarget(e.nativeEvent);\n          if ('releasePointerCapture' in target) {\n            target.releasePointerCapture(e.pointerId);\n          }\n\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        if (e.button === 0) {\n          if (preventFocusOnPress) {\n            let dispose = preventFocus(e.target as FocusableElement);\n            if (dispose) {\n              state.disposables.push(dispose);\n            }\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent)) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        if (e.button === 0) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      pressProps.onPointerEnter = (e) => {\n        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = true;\n          triggerPressStart(createEvent(state.target, e), state.pointerType);\n        }\n      };\n\n      pressProps.onPointerLeave = (e) => {\n        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if (nodeContains(state.target, getEventTarget(e)) && state.pointerType != null) {\n            // Wait for onClick to fire onPress. This avoids browser issues when the DOM\n            // is mutated between onPointerUp and onClick, and is more compatible with third party libraries.\n            // https://github.com/adobe/react-spectrum/issues/1513\n            // https://issues.chromium.org/issues/40732224\n            // However, iOS and Android do not focus or fire onClick after a long press.\n            // We work around this by triggering a click ourselves after a timeout.\n            // This timeout is canceled during the click event in case the real one fires first.\n            // The timeout must be at least 32ms, because Safari on iOS delays the click event on\n            // non-form elements without certain ARIA roles (for hover emulation).\n            // https://github.com/WebKit/WebKit/blob/dccfae42bb29bd4bdef052e469f604a9387241c0/Source/WebKit/WebProcess/WebPage/ios/WebPageIOS.mm#L875-L892\n            let clicked = false;\n            let timeout = setTimeout(() => {\n              if (state.isPressed && state.target instanceof HTMLElement) {\n                if (clicked) {\n                  cancel(e);\n                } else {\n                  focusWithoutScrolling(state.target);\n                  state.target.click();\n                }\n              }\n            }, 80);\n            // Use a capturing listener to track if a click occurred.\n            // If stopPropagation is called it may never reach our handler.\n            addGlobalListener(e.currentTarget as Document, 'click', () => clicked = true, true);\n            state.disposables.push(() => clearTimeout(timeout));\n          } else {\n            cancel(e);\n          }\n\n          // Ignore subsequent onPointerLeave event before onClick on touch devices.\n          state.isOverTarget = false;\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      // NOTE: this fallback branch is almost entirely used by unit tests.\n      // All browsers now support pointer events, but JSDOM still does not.\n\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        // Flush sync so that focus moved during react re-renders occurs before we yield back to the browser.\n        let shouldStopPropagation = flushSync(() => triggerPressStart(e, state.pointerType!));\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        if (preventFocusOnPress) {\n          let dispose = preventFocus(e.target as FocusableElement);\n          if (dispose) {\n            state.disposables.push(dispose);\n          }\n        }\n\n        addGlobalListener(getOwnerDocument(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType || 'mouse');\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (state.target && state.target.contains(e.target as Element) && state.pointerType != null) {\n          // Wait for onClick to fire onPress. This avoids browser issues when the DOM\n          // is mutated between onMouseUp and onClick, and is more compatible with third party libraries.\n        } else {\n          cancel(e);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        let shouldStopPropagation = triggerPressStart(createTouchEvent(state.target, e), state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerWindow(e.currentTarget), 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(createTouchEvent(state.target!, e), state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType, false);\n          cancelOnPointerExit(createTouchEvent(state.target!, e));\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp(createTouchEvent(state.target!, e), state.pointerType);\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) {\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(createTouchEvent(state.target!, e));\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && nodeContains(getEventTarget(e), state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!nodeContains(e.currentTarget, getEventTarget(e.nativeEvent))) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [\n    addGlobalListener,\n    isDisabled,\n    preventFocusOnPress,\n    removeAllGlobalListeners,\n    allowTextSelectionOnPress,\n    cancel,\n    cancelOnPointerExit,\n    triggerPressEnd,\n    triggerPressStart,\n    triggerPressUp\n  ]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n\n  useEffect(() => {\n    let state = ref.current;\n    return () => {\n      if (!allowTextSelectionOnPress) {\n         \n        restoreTextSelection(state.target ?? undefined);\n      }\n      for (let dispose of state.disposables) {\n        dispose();\n      }\n      state.disposables = [];\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): target is HTMLAnchorElement {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof getOwnerWindow(element).HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof getOwnerWindow(element).HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // Links should only trigger with Enter key\n    !((role === 'link' || (!role && isHTMLAnchorLink(element))) && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createTouchEvent(target: FocusableElement, e: RTouchEvent<FocusableElement>): EventBase {\n  let clientX = 0;\n  let clientY = 0;\n  if (e.targetTouches && e.targetTouches.length === 1) {\n    clientX = e.targetTouches[0].clientX;\n    clientY = e.targetTouches[0].clientY;\n  }\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX,\n    clientY\n  };\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  let clientX = e.clientX;\n  let clientY = e.clientY;\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX,\n    clientY\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) {\n    offsetX = (point.width / 2);\n  } else if (point.radiusX !== undefined) {\n    offsetX = point.radiusX;\n  }\n  if (point.height !== undefined) {\n    offsetY = (point.height / 2);\n  } else if (point.radiusY !== undefined) {\n    offsetY = point.radiusY;\n  }\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefaultUp(target: Element) {\n  if (target instanceof HTMLInputElement) {\n    return false;\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit' && target.type !== 'reset';\n  }\n\n  if (isHTMLAnchorLink(target)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  return shouldPreventDefaultUp(target);\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}