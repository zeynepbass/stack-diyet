{"ast":null,"code":"'use strict';\n\nconst stringify = require('./stringify');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH,\n  /* \\ */\n  CHAR_BACKTICK,\n  /* ` */\n  CHAR_COMMA,\n  /* , */\n  CHAR_DOT,\n  /* . */\n  CHAR_LEFT_PARENTHESES,\n  /* ( */\n  CHAR_RIGHT_PARENTHESES,\n  /* ) */\n  CHAR_LEFT_CURLY_BRACE,\n  /* { */\n  CHAR_RIGHT_CURLY_BRACE,\n  /* } */\n  CHAR_LEFT_SQUARE_BRACKET,\n  /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET,\n  /* ] */\n  CHAR_DOUBLE_QUOTE,\n  /* \" */\n  CHAR_SINGLE_QUOTE,\n  /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n\n/**\n * parse\n */\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  const opts = options || {};\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n  const ast = {\n    type: 'root',\n    input,\n    nodes: []\n  };\n  const stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  const length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n  push({\n    type: 'bos'\n  });\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n\n    /**\n     * Escaped chars\n     */\n\n    if (value === CHAR_BACKSLASH) {\n      push({\n        type: 'text',\n        value: (options.keepEscaping ? value : '') + advance()\n      });\n      continue;\n    }\n\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({\n        type: 'text',\n        value: '\\\\' + value\n      });\n      continue;\n    }\n\n    /**\n     * Left square bracket: '['\n     */\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n      let next;\n      while (index < length && (next = advance())) {\n        value += next;\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({\n        type: 'paren',\n        nodes: []\n      });\n      stack.push(block);\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n      block = stack.pop();\n      push({\n        type: 'text',\n        value\n      });\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Quotes: '|\"|`\n     */\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      const open = value;\n      let next;\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n        value += next;\n      }\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n\n    /**\n     * Left curly brace: '{'\n     */\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n      const dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      const brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n      block = push(brace);\n      stack.push(block);\n      push({\n        type: 'open',\n        value\n      });\n      continue;\n    }\n\n    /**\n     * Right curly brace: '}'\n     */\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n      const type = 'close';\n      block = stack.pop();\n      block.close = true;\n      push({\n        type,\n        value\n      });\n      depth--;\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Comma: ','\n     */\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        const open = block.nodes.shift();\n        block.nodes = [open, {\n          type: 'text',\n          value: stringify(block)\n        }];\n      }\n      push({\n        type: 'comma',\n        value\n      });\n      block.commas++;\n      continue;\n    }\n\n    /**\n     * Dot: '.'\n     */\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      const siblings = block.nodes;\n      if (depth === 0 || siblings.length === 0) {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n      if (prev.type === 'range') {\n        siblings.pop();\n        const before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n      push({\n        type: 'dot',\n        value\n      });\n      continue;\n    }\n\n    /**\n     * Text\n     */\n\n    push({\n      type: 'text',\n      value\n    });\n  }\n\n  // Mark imbalanced braces and brackets as invalid\n  do {\n    block = stack.pop();\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      });\n\n      // get the location of the block on parent.nodes (block's siblings)\n      const parent = stack[stack.length - 1];\n      const index = parent.nodes.indexOf(block);\n      // replace the (invalid) block with it's nodes\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n  push({\n    type: 'eos'\n  });\n  return ast;\n};\nmodule.exports = parse;","map":{"version":3,"names":["stringify","require","MAX_LENGTH","CHAR_BACKSLASH","CHAR_BACKTICK","CHAR_COMMA","CHAR_DOT","CHAR_LEFT_PARENTHESES","CHAR_RIGHT_PARENTHESES","CHAR_LEFT_CURLY_BRACE","CHAR_RIGHT_CURLY_BRACE","CHAR_LEFT_SQUARE_BRACKET","CHAR_RIGHT_SQUARE_BRACKET","CHAR_DOUBLE_QUOTE","CHAR_SINGLE_QUOTE","CHAR_NO_BREAK_SPACE","CHAR_ZERO_WIDTH_NOBREAK_SPACE","parse","input","options","TypeError","opts","max","maxLength","Math","min","length","SyntaxError","ast","type","nodes","stack","block","prev","brackets","index","depth","value","advance","push","node","parent","keepEscaping","next","pop","open","keepQuotes","dollar","slice","brace","close","commas","ranges","shift","siblings","range","invalid","args","before","forEach","isOpen","isClose","indexOf","splice","module","exports"],"sources":["/Users/zeynepbas/Desktop/stackowerflow/node_modules/braces/lib/parse.js"],"sourcesContent":["'use strict';\n\nconst stringify = require('./stringify');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH, /* \\ */\n  CHAR_BACKTICK, /* ` */\n  CHAR_COMMA, /* , */\n  CHAR_DOT, /* . */\n  CHAR_LEFT_PARENTHESES, /* ( */\n  CHAR_RIGHT_PARENTHESES, /* ) */\n  CHAR_LEFT_CURLY_BRACE, /* { */\n  CHAR_RIGHT_CURLY_BRACE, /* } */\n  CHAR_LEFT_SQUARE_BRACKET, /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET, /* ] */\n  CHAR_DOUBLE_QUOTE, /* \" */\n  CHAR_SINGLE_QUOTE, /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n\n/**\n * parse\n */\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  const opts = options || {};\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  const ast = { type: 'root', input, nodes: [] };\n  const stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  const length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({ type: 'bos' });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n\n    /**\n     * Escaped chars\n     */\n\n    if (value === CHAR_BACKSLASH) {\n      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });\n      continue;\n    }\n\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({ type: 'text', value: '\\\\' + value });\n      continue;\n    }\n\n    /**\n     * Left square bracket: '['\n     */\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({ type: 'paren', nodes: [] });\n      stack.push(block);\n      push({ type: 'text', value });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({ type: 'text', value });\n        continue;\n      }\n      block = stack.pop();\n      push({ type: 'text', value });\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Quotes: '|\"|`\n     */\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      const open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Left curly brace: '{'\n     */\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n\n      const dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      const brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n\n      block = push(brace);\n      stack.push(block);\n      push({ type: 'open', value });\n      continue;\n    }\n\n    /**\n     * Right curly brace: '}'\n     */\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      const type = 'close';\n      block = stack.pop();\n      block.close = true;\n\n      push({ type, value });\n      depth--;\n\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Comma: ','\n     */\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        const open = block.nodes.shift();\n        block.nodes = [open, { type: 'text', value: stringify(block) }];\n      }\n\n      push({ type: 'comma', value });\n      block.commas++;\n      continue;\n    }\n\n    /**\n     * Dot: '.'\n     */\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      const siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n\n        const before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({ type: 'dot', value });\n      continue;\n    }\n\n    /**\n     * Text\n     */\n\n    push({ type: 'text', value });\n  }\n\n  // Mark imbalanced braces and brackets as invalid\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      });\n\n      // get the location of the block on parent.nodes (block's siblings)\n      const parent = stack[stack.length - 1];\n      const index = parent.nodes.indexOf(block);\n      // replace the (invalid) block with it's nodes\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({ type: 'eos' });\n  return ast;\n};\n\nmodule.exports = parse;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}