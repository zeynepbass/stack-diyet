{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst useStore = create(set => ({\n  data: [],\n  // Store the fetched data\n  veri: [],\n  usersData: [],\n  filteredData: [],\n  // Store the filtered data\n  search: \"\",\n  // Store the search term\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  firstName: JSON.parse(localStorage.getItem(\"firstName\")),\n  // Fetch data from API\n  fetchPost: async () => {\n    try {\n      const response = await axios.get('http://localhost:6078/panel');\n      const fetchedData = response.data;\n\n      // Get the current search term from state and filter the fetched data\n      set(state => {\n        const filteredData = fetchedData.filter(item => item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n        ).reverse();\n        return {\n          data: fetchedData,\n          filteredData: filteredData // Store the filtered data\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  // Update search term and filter data accordingly\n  setSearch: newSearch => {\n    set(state => {\n      const filteredData = state.data.filter(item => item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n      ).reverse(); // Reverse the order of the filtered data\n\n      return {\n        search: newSearch,\n        filteredData: filteredData // Update filtered data with reversed order\n      };\n    });\n  },\n  fetchUsers: async () => {\n    try {\n      const response = await axios.get(`http://localhost:6078/users`);\n      set({\n        usersData: response.data\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchLike: async (postId, incrementValue) => {\n    try {\n      await axios.put(`http://localhost:6078/panel/like/${postId}`);\n      set(state => {\n        const updatedPosts = state.filteredData.map(post => post._id === postId ? {\n          ...post,\n          likeCount: incrementValue\n        } : post);\n        return {\n          filteredData: updatedPosts\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchComment: async formData => {\n    try {\n      // Get user from localStorage\n      const user = JSON.parse(localStorage.getItem('user')) || null;\n\n      // Check if user exists\n      if (!user) {\n        console.error('No user found');\n        return;\n      }\n\n      // Get usersData from the store state\n      set(state => {\n        const usersData = state === null || state === void 0 ? void 0 : state.usersData;\n\n        // Ensure usersData is populated and find the user with matching email\n        const userMatch = usersData === null || usersData === void 0 ? void 0 : usersData.find(item => item.email === user.result.email);\n        if (!userMatch) {\n          console.error('User not found in usersData');\n          return;\n        }\n\n        // Fetch the nickname (use the correct field name, assuming it's firstName)\n        const nickName = userMatch.nickName || userMatch.firstName;\n\n        // Create the new post object with the formData and the user's nickname\n        const newPost = {\n          ...formData,\n          // Include formData fields\n          nickName: nickName // Add nickname from the user\n        };\n\n        // Now, send newPost to the API\n        axios.post('http://localhost:6078/panel', newPost).then(response => {\n          // Update filteredData with the new post, making sure filteredData is defined\n          set(state => {\n            // Make sure filteredData is initialized properly if it's undefined\n            const updatedFilteredData = state !== null && state !== void 0 && state.data ? [...state.filteredData, response.data] : [response.data];\n\n            // Return the updated state with filteredData\n            return {\n              filteredData: updatedFilteredData\n            };\n          });\n        }).catch(error => {\n          console.error('Error submitting comment:', error);\n        });\n      });\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchRegister: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n      if (response) {\n        localStorage.setItem(\"firstName\", JSON.stringify(response.data.result.firstName));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchLogin: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n      if (response) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchSifre: async formData => {\n    try {\n      var _localEmail$result;\n      // localStorage'dan \"user\" bilgilerini al\n      const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n\n      // localEmail objesinin içinde yer alan email alanını al\n      const email = localEmail === null || localEmail === void 0 ? void 0 : (_localEmail$result = localEmail.result) === null || _localEmail$result === void 0 ? void 0 : _localEmail$result.email;\n      if (!email) {\n        console.error(\"Email bilgisi bulunamadı.\");\n        console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n        return;\n      }\n\n      // formData'ya email'i ekle\n      const formDataWithEmail = {\n        ...formData,\n        email\n      };\n      console.log(formDataWithEmail); // Kontrol amacıyla\n\n      const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n      console.log(response); // API'den gelen yanıtı kontrol et\n\n      // API yanıtını kontrol et\n      if (response.data.success) {\n        console.log(\"Şifre güncelleme başarılı.\");\n      } else {\n        console.log(\"Şifre güncellenirken bir hata oluştu.\");\n      }\n    } catch (error) {\n      console.error(\"Hata oluştu:\", error);\n      console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","useStore","set","data","veri","usersData","filteredData","search","user","JSON","parse","localStorage","getItem","firstName","fetchPost","response","get","fetchedData","state","filter","item","baslik","toLowerCase","includes","reverse","error","console","setSearch","newSearch","fetchUsers","fetchLike","postId","incrementValue","put","updatedPosts","map","post","_id","likeCount","fetchComment","formData","userMatch","find","email","result","nickName","newPost","then","updatedFilteredData","catch","fetchRegister","setItem","stringify","fetchLogin","fetchSifre","_localEmail$result","localEmail","log","formDataWithEmail","success"],"sources":["/Users/zeynepbas/Documents/GitHub/stack-diyet/client/src/components/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst useStore = create((set) => ({\n    data: [],  // Store the fetched data\n    veri: [],\n    usersData: [],\n    filteredData: [], // Store the filtered data\n    search: \"\", // Store the search term\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\n    firstName: JSON.parse(localStorage.getItem(\"firstName\")),\n    // Fetch data from API\n    fetchPost: async () => {\n        try {\n            const response = await axios.get('http://localhost:6078/panel');\n            const fetchedData = response.data;\n\n            // Get the current search term from state and filter the fetched data\n            set((state) => {\n                const filteredData = fetchedData.filter((item) =>\n                    item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n                ).reverse();\n\n                return {\n                    data: fetchedData,\n                    filteredData: filteredData, // Store the filtered data\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n\n    // Update search term and filter data accordingly\n    setSearch: (newSearch) => {\n        set((state) => {\n            const filteredData = state.data\n                .filter((item) =>\n                    item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n                )\n                .reverse();  // Reverse the order of the filtered data\n\n            return {\n                search: newSearch,\n                filteredData: filteredData, // Update filtered data with reversed order\n            };\n        });\n    },\n\n    fetchUsers: async () => {\n        try {\n            const response = await axios.get(`http://localhost:6078/users`);\n            set({ usersData: response.data })\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchLike: async (postId, incrementValue) => {\n        try {\n            await axios.put(`http://localhost:6078/panel/like/${postId}`);\n            set((state) => {\n                const updatedPosts = state.filteredData.map((post) =>\n                    post._id === postId ? { ...post, likeCount: incrementValue } : post\n                );\n                return {\n                    filteredData: updatedPosts,\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchComment: async (formData) => {\n        try {\n            // Get user from localStorage\n            const user = JSON.parse(localStorage.getItem('user')) || null;\n    \n            // Check if user exists\n            if (!user) {\n                console.error('No user found');\n                return;\n            }\n    \n            // Get usersData from the store state\n            set((state) => {\n                const usersData = state?.usersData;\n    \n                // Ensure usersData is populated and find the user with matching email\n                const userMatch = usersData?.find((item) => item.email === user.result.email);\n    \n                if (!userMatch) {\n                    console.error('User not found in usersData');\n                    return;\n                }\n    \n                // Fetch the nickname (use the correct field name, assuming it's firstName)\n                const nickName = userMatch.nickName || userMatch.firstName;\n    \n                // Create the new post object with the formData and the user's nickname\n                const newPost = {\n                    ...formData,    // Include formData fields\n                    nickName: nickName, // Add nickname from the user\n                };\n    \n                // Now, send newPost to the API\n                axios.post('http://localhost:6078/panel', newPost)\n                    .then((response) => {\n                        // Update filteredData with the new post, making sure filteredData is defined\n                        set((state) => {\n                            // Make sure filteredData is initialized properly if it's undefined\n                            const updatedFilteredData = state?.data ? [...state.filteredData, response.data] : [response.data];\n    \n                            // Return the updated state with filteredData\n                            return {\n                                filteredData: updatedFilteredData,\n                            };\n                        });\n                    })\n                    .catch((error) => {\n                        console.error('Error submitting comment:', error);\n                    });\n            });\n    \n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    \n    fetchRegister: async (formData) => {\n\n        try {\n            const response = await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n\n            if (response) {\n\n                localStorage.setItem(\"firstName\", JSON.stringify(response.data.result.firstName));\n            } else {\n                console.error(\"Response data is missing\");\n            }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchLogin: async (formData) => {\n\n        try {\n            const response = await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n            if (response) {\n\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\n            } else {\n                console.error(\"Response data is missing\");\n            }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchSifre: async (formData) => {\n        try {\n            // localStorage'dan \"user\" bilgilerini al\n            const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n\n            // localEmail objesinin içinde yer alan email alanını al\n            const email = localEmail?.result?.email;\n\n            if (!email) {\n                console.error(\"Email bilgisi bulunamadı.\");\n                console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n                return;\n            }\n\n            // formData'ya email'i ekle\n            const formDataWithEmail = { ...formData, email };\n\n            console.log(formDataWithEmail); // Kontrol amacıyla\n\n            const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n            console.log(response);  // API'den gelen yanıtı kontrol et\n\n            // API yanıtını kontrol et\n            if (response.data.success) {\n                console.log(\"Şifre güncelleme başarılı.\");\n\n\n            } else {\n                console.log(\"Şifre güncellenirken bir hata oluştu.\");\n            }\n\n        } catch (error) {\n            console.error(\"Hata oluştu:\", error);\n            console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n        }\n    }\n\n}));\n\nexport default useStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}