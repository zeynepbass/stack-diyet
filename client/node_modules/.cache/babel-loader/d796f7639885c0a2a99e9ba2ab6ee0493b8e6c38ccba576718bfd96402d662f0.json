{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst useStore = create(set => ({\n  data: [],\n  // Store the fetched data\n  veri: [],\n  filteredData: [],\n  // Store the filtered data\n  search: \"\",\n  // Store the search term\n  user: JSON.parse(localStorage.getItem(\"user\")),\n  // Fetch data from API\n  fetchPost: async () => {\n    try {\n      const response = await axios.get('http://localhost:6078/panel');\n      const fetchedData = response.data;\n\n      // Get the current search term from state and filter the fetched data\n      set(state => {\n        const filteredData = fetchedData.filter(item => item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n        );\n        return {\n          data: fetchedData,\n          filteredData: filteredData // Store the filtered data\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  // Update search term and filter data accordingly\n  setSearch: newSearch => {\n    set(state => {\n      const filteredData = state.data.filter(item => item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n      );\n      return {\n        search: newSearch,\n        filteredData: filteredData // Update filtered data\n      };\n    });\n  },\n  fetchLike: async (postId, incrementValue) => {\n    try {\n      await axios.put(`http://localhost:6078/panel/like/${postId}`);\n      set(state => {\n        const updatedPosts = state.filteredData.map(post => post._id === postId ? {\n          ...post,\n          likeCount: incrementValue\n        } : post);\n        return {\n          filteredData: updatedPosts\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchComment: async formData => {\n    try {\n      var _localEmail, _localEmail$result;\n      const email = (_localEmail = localEmail) === null || _localEmail === void 0 ? void 0 : (_localEmail$result = _localEmail.result) === null || _localEmail$result === void 0 ? void 0 : _localEmail$result.email;\n      const data = {\n        ...formData\n      };\n      const response = await axios.post(\"http://localhost:6078/panel\", formData, email); // Use POST if required by the backend\n\n      // Assuming the response contains the new post or comment\n      const newPost = response.data; // Assuming response contains the new post data\n\n      set(state => {\n        const updatedFilteredData = [...state.filteredData, newPost]; // Add to filteredData if necessary\n        return {\n          filteredData: updatedFilteredData // Optionally update filtered data if necessary\n        };\n      });\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchRegister: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n      if (response) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchLogin: async formData => {\n    try {\n      await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchSifre: async formData => {\n    try {\n      var _localEmail$result2;\n      // localStorage'dan \"user\" bilgilerini al\n      const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n\n      // localEmail objesinin içinde yer alan email alanını al\n      const email = localEmail === null || localEmail === void 0 ? void 0 : (_localEmail$result2 = localEmail.result) === null || _localEmail$result2 === void 0 ? void 0 : _localEmail$result2.email;\n      if (!email) {\n        console.error(\"Email bilgisi bulunamadı.\");\n        console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n        return;\n      }\n\n      // formData'ya email'i ekle\n      const formDataWithEmail = {\n        ...formData,\n        email\n      };\n      console.log(formDataWithEmail); // Kontrol amacıyla\n\n      const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n      console.log(response); // API'den gelen yanıtı kontrol et\n\n      // API yanıtını kontrol et\n      if (response.data.success) {\n        console.log(\"Şifre güncelleme başarılı.\");\n      } else {\n        console.log(\"Şifre güncellenirken bir hata oluştu.\");\n      }\n    } catch (error) {\n      console.error(\"Hata oluştu:\", error);\n      console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","useStore","set","data","veri","filteredData","search","user","JSON","parse","localStorage","getItem","fetchPost","response","get","fetchedData","state","filter","item","baslik","toLowerCase","includes","error","console","setSearch","newSearch","fetchLike","postId","incrementValue","put","updatedPosts","map","post","_id","likeCount","fetchComment","formData","_localEmail","_localEmail$result","email","localEmail","result","newPost","updatedFilteredData","fetchRegister","setItem","stringify","fetchLogin","fetchSifre","_localEmail$result2","log","formDataWithEmail","success"],"sources":["/Users/zeynepbas/Documents/GitHub/stack-diyet/client/src/components/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst useStore = create((set) => ({\n    data: [],  // Store the fetched data\n    veri: [],\n    filteredData: [], // Store the filtered data\n    search: \"\", // Store the search term\n    user: JSON.parse(localStorage.getItem(\"user\")),\n       \n    // Fetch data from API\n    fetchPost: async () => {\n        try {\n            const response = await axios.get('http://localhost:6078/panel');\n            const fetchedData = response.data;\n\n            // Get the current search term from state and filter the fetched data\n            set((state) => {\n                const filteredData = fetchedData.filter((item) =>\n                    item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n                );\n\n                return {\n                    data: fetchedData,\n                    filteredData: filteredData, // Store the filtered data\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n\n    // Update search term and filter data accordingly\n    setSearch: (newSearch) => {\n        set((state) => {\n            const filteredData = state.data.filter((item) =>\n                item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n            );\n            return {\n                search: newSearch,\n                filteredData: filteredData, // Update filtered data\n            };\n        });\n    },\n\n    fetchLike: async (postId, incrementValue) => {\n        try {\n            await axios.put(`http://localhost:6078/panel/like/${postId}`);\n            set((state) => {\n                const updatedPosts = state.filteredData.map((post) =>\n                    post._id === postId ? { ...post, likeCount: incrementValue } : post\n                );\n                return {\n                    filteredData: updatedPosts,\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchComment: async (formData) => {\n        try {\n            const email = localEmail?.result?.email;\n            const data={...formData,}\n            const response = await axios.post(\"http://localhost:6078/panel\", formData,email); // Use POST if required by the backend\n\n            // Assuming the response contains the new post or comment\n            const newPost = response.data; // Assuming response contains the new post data\n\n            set((state) => {\n\n                const updatedFilteredData = [...state.filteredData, newPost]; // Add to filteredData if necessary\n                return {\n\n                    filteredData: updatedFilteredData, // Optionally update filtered data if necessary\n                };\n            });\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchRegister: async (formData) => {\n     \n        try {\n           const response= await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n        \n           if (response) {\n       \n             localStorage.setItem(\"user\", JSON.stringify(response.data));\n           } else {\n             console.error(\"Response data is missing\");\n           }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchLogin: async (formData) => {\n     \n        try {\n       await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n  \n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchSifre: async (formData) => {\n        try {\n            // localStorage'dan \"user\" bilgilerini al\n            const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n            \n            // localEmail objesinin içinde yer alan email alanını al\n            const email = localEmail?.result?.email;\n    \n            if (!email) {\n                console.error(\"Email bilgisi bulunamadı.\");\n                console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n                return;\n            }\n    \n            // formData'ya email'i ekle\n            const formDataWithEmail = { ...formData, email };\n    \n            console.log(formDataWithEmail); // Kontrol amacıyla\n    \n            const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n            console.log(response);  // API'den gelen yanıtı kontrol et\n            \n            // API yanıtını kontrol et\n            if (response.data.success) {\n                console.log(\"Şifre güncelleme başarılı.\");\n    \n               \n            } else {\n                console.log(\"Şifre güncellenirken bir hata oluştu.\");\n            }\n    \n        } catch (error) {\n            console.error(\"Hata oluştu:\", error);\n            console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n        }\n    }\n    \n}));\n\nexport default useStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}