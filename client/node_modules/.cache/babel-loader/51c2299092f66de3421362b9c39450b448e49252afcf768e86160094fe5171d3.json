{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst useStore = create(set => ({\n  data: [],\n  // Store the fetched data\n  veri: [],\n  usersData: [],\n  filteredData: [],\n  // Store the filtered data\n  search: \"\",\n  // Store the search term\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  firstName: JSON.parse(localStorage.getItem(\"firstName\")),\n  // Fetch data from API\n  fetchPost: async () => {\n    try {\n      const response = await axios.get('http://localhost:6078/panel');\n      const fetchedData = response.data;\n\n      // Get the current search term from state and filter the fetched data\n      set(state => {\n        const filteredData = fetchedData.filter(item => item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n        );\n        return {\n          data: fetchedData,\n          filteredData: filteredData // Store the filtered data\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  // Update search term and filter data accordingly\n  setSearch: newSearch => {\n    set(state => {\n      const filteredData = state.data.filter(item => item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n      );\n      return {\n        search: newSearch,\n        filteredData: filteredData.reverse() // Update filtered data\n      };\n    });\n  },\n  fetchUsers: async () => {\n    try {\n      const response = await axios.get(`http://localhost:6078/users`);\n      set({\n        usersData: response.data\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchLike: async (postId, incrementValue) => {\n    try {\n      await axios.put(`http://localhost:6078/panel/like/${postId}`);\n      set(state => {\n        const updatedPosts = state.filteredData.map(post => post._id === postId ? {\n          ...post,\n          likeCount: incrementValue\n        } : post);\n        return {\n          filteredData: updatedPosts\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchComment: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/panel\", formData);\n\n      // Get user from localStorage\n      const user = JSON.parse(localStorage.getItem(\"user\")) || null;\n      set(state => {\n        const usersData = state.usersData;\n        if (!user) {\n          console.error(\"No user found\");\n          return;\n        }\n\n        // Ensure usersData is populated and find the user with matching email\n        const userMatch = usersData.find(item => item.email === user.result.email);\n        if (!userMatch) {\n          console.error(\"User nickname not found\");\n          return;\n        }\n        const nickName = userMatch.firstName;\n        const updatedFilteredData = [...state.filteredData, newPost];\n        const newPost = {\n          ...response.data,\n          nickName: nickName\n        };\n        console.log(newPost);\n        return {\n          usersDataf: usersData,\n          newPost: newPost,\n          filteredData: updatedFilteredData\n        };\n      });\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchRegister: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n      if (response) {\n        localStorage.setItem(\"firstName\", JSON.stringify(response.data.result.firstName));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchLogin: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n      if (response) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchSifre: async formData => {\n    try {\n      var _localEmail$result;\n      // localStorage'dan \"user\" bilgilerini al\n      const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n\n      // localEmail objesinin içinde yer alan email alanını al\n      const email = localEmail === null || localEmail === void 0 ? void 0 : (_localEmail$result = localEmail.result) === null || _localEmail$result === void 0 ? void 0 : _localEmail$result.email;\n      if (!email) {\n        console.error(\"Email bilgisi bulunamadı.\");\n        console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n        return;\n      }\n\n      // formData'ya email'i ekle\n      const formDataWithEmail = {\n        ...formData,\n        email\n      };\n      console.log(formDataWithEmail); // Kontrol amacıyla\n\n      const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n      console.log(response); // API'den gelen yanıtı kontrol et\n\n      // API yanıtını kontrol et\n      if (response.data.success) {\n        console.log(\"Şifre güncelleme başarılı.\");\n      } else {\n        console.log(\"Şifre güncellenirken bir hata oluştu.\");\n      }\n    } catch (error) {\n      console.error(\"Hata oluştu:\", error);\n      console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","useStore","set","data","veri","usersData","filteredData","search","user","JSON","parse","localStorage","getItem","firstName","fetchPost","response","get","fetchedData","state","filter","item","baslik","toLowerCase","includes","error","console","setSearch","newSearch","reverse","fetchUsers","fetchLike","postId","incrementValue","put","updatedPosts","map","post","_id","likeCount","fetchComment","formData","userMatch","find","email","result","nickName","updatedFilteredData","newPost","log","usersDataf","fetchRegister","setItem","stringify","fetchLogin","fetchSifre","_localEmail$result","localEmail","formDataWithEmail","success"],"sources":["/Users/zeynepbas/Documents/GitHub/stack-diyet/client/src/components/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst useStore = create((set) => ({\n    data: [],  // Store the fetched data\n    veri: [],\n    usersData:[],\n    filteredData: [], // Store the filtered data\n    search: \"\", // Store the search term\n  user: JSON.parse(localStorage.getItem(\"user\")) || null, \n    firstName: JSON.parse(localStorage.getItem(\"firstName\")),\n    // Fetch data from API\n    fetchPost: async () => {\n        try {\n            const response = await axios.get('http://localhost:6078/panel');\n            const fetchedData = response.data;\n\n            // Get the current search term from state and filter the fetched data\n            set((state) => {\n                const filteredData = fetchedData.filter((item) =>\n                    item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n                );\n\n                return {\n                    data: fetchedData,\n                    filteredData: filteredData, // Store the filtered data\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n\n    // Update search term and filter data accordingly\n    setSearch: (newSearch) => {\n        set((state) => {\n            const filteredData = state.data.filter((item) =>\n                item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n            );\n            return {\n                search: newSearch,\n                filteredData: filteredData.reverse(), // Update filtered data\n            };\n        });\n    },\n    fetchUsers: async () => {\n        try {\n            const response=await axios.get(`http://localhost:6078/users`);\n            set({usersData:response.data})\n        \n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchLike: async (postId, incrementValue) => {\n        try {\n            await axios.put(`http://localhost:6078/panel/like/${postId}`);\n            set((state) => {\n                const updatedPosts = state.filteredData.map((post) =>\n                    post._id === postId ? { ...post, likeCount: incrementValue } : post\n                );\n                return {\n                    filteredData: updatedPosts,\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchComment: async (formData) => {\n        try {\n            const response = await axios.post(\"http://localhost:6078/panel\", formData);\n            \n            // Get user from localStorage\n            const user = JSON.parse(localStorage.getItem(\"user\")) || null;\n       \n                set((state) => {\n            const usersData = state.usersData;\n            if (!user) {\n                console.error(\"No user found\");\n                return;\n            }\n    \n            // Ensure usersData is populated and find the user with matching email\n            const userMatch = usersData.find((item) => item.email === user.result.email);\n            if (!userMatch) {\n                console.error(\"User nickname not found\");\n                return;\n            }\n    \n            const nickName = userMatch.firstName;\n            const updatedFilteredData = [...state.filteredData, newPost];\n     \n            const newPost = {\n                ...response.data,\n                nickName: nickName,\n            };\n            console.log(newPost)\n            return {\n                usersDataf: usersData,\n                newPost:newPost,\n                filteredData: updatedFilteredData\n            };\n   \n        });\n    \n    \n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    \n    \n    fetchRegister: async (formData) => {\n     \n        try {\n           const response= await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n           \n           if (response) {\n       \n             localStorage.setItem(\"firstName\", JSON.stringify(response.data.result.firstName));\n           } else {\n             console.error(\"Response data is missing\");\n           }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchLogin: async (formData) => {\n     \n        try {\n     const response=  await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n     if (response) {\n       \n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchSifre: async (formData) => {\n        try {\n            // localStorage'dan \"user\" bilgilerini al\n            const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n            \n            // localEmail objesinin içinde yer alan email alanını al\n            const email = localEmail?.result?.email;\n    \n            if (!email) {\n                console.error(\"Email bilgisi bulunamadı.\");\n                console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n                return;\n            }\n    \n            // formData'ya email'i ekle\n            const formDataWithEmail = { ...formData, email };\n    \n            console.log(formDataWithEmail); // Kontrol amacıyla\n    \n            const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n            console.log(response);  // API'den gelen yanıtı kontrol et\n            \n            // API yanıtını kontrol et\n            if (response.data.success) {\n                console.log(\"Şifre güncelleme başarılı.\");\n    \n               \n            } else {\n                console.log(\"Şifre güncellenirken bir hata oluştu.\");\n            }\n    \n        } catch (error) {\n            console.error(\"Hata oluştu:\", error);\n            console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n        }\n    }\n    \n}));\n\nexport default useStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}