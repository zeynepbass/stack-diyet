{"ast":null,"code":"'use strict';\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0);\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\nconst BACKSLASH = '\\\\'.charCodeAt(0);\nconst SLASH = '/'.charCodeAt(0);\nconst NEWLINE = '\\n'.charCodeAt(0);\nconst SPACE = ' '.charCodeAt(0);\nconst FEED = '\\f'.charCodeAt(0);\nconst TAB = '\\t'.charCodeAt(0);\nconst CR = '\\r'.charCodeAt(0);\nconst OPEN_SQUARE = '['.charCodeAt(0);\nconst CLOSE_SQUARE = ']'.charCodeAt(0);\nconst OPEN_PARENTHESES = '('.charCodeAt(0);\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0);\nconst OPEN_CURLY = '{'.charCodeAt(0);\nconst CLOSE_CURLY = '}'.charCodeAt(0);\nconst SEMICOLON = ';'.charCodeAt(0);\nconst ASTERISK = '*'.charCodeAt(0);\nconst COLON = ':'.charCodeAt(0);\nconst AT = '@'.charCodeAt(0);\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf();\n  let ignore = options.ignoreErrors;\n  let code, content, escape, next, quote;\n  let currentToken, escaped, escapePos, n, prev;\n  let length = css.length;\n  let pos = 0;\n  let buffer = [];\n  let returned = [];\n  function position() {\n    return pos;\n  }\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos);\n  }\n  function endOfFile() {\n    return returned.length === 0 && pos >= length;\n  }\n  function nextToken(opts) {\n    if (returned.length) return returned.pop();\n    if (pos >= length) return;\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n    code = css.charCodeAt(pos);\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        {\n          next = pos;\n          do {\n            next += 1;\n            code = css.charCodeAt(next);\n          } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n          currentToken = ['space', css.slice(pos, next)];\n          pos = next - 1;\n          break;\n        }\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES:\n        {\n          let controlChar = String.fromCharCode(code);\n          currentToken = [controlChar, controlChar, pos];\n          break;\n        }\n      case OPEN_PARENTHESES:\n        {\n          prev = buffer.length ? buffer.pop()[1] : '';\n          n = css.charCodeAt(pos + 1);\n          if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n            next = pos;\n            do {\n              escaped = false;\n              next = css.indexOf(')', next + 1);\n              if (next === -1) {\n                if (ignore || ignoreUnclosed) {\n                  next = pos;\n                  break;\n                } else {\n                  unclosed('bracket');\n                }\n              }\n              escapePos = next;\n              while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n                escapePos -= 1;\n                escaped = !escaped;\n              }\n            } while (escaped);\n            currentToken = ['brackets', css.slice(pos, next + 1), pos, next];\n            pos = next;\n          } else {\n            next = css.indexOf(')', pos + 1);\n            content = css.slice(pos, next + 1);\n            if (next === -1 || RE_BAD_BRACKET.test(content)) {\n              currentToken = ['(', '(', pos];\n            } else {\n              currentToken = ['brackets', content, pos, next];\n              pos = next;\n            }\n          }\n          break;\n        }\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        {\n          quote = code === SINGLE_QUOTE ? \"'\" : '\"';\n          next = pos;\n          do {\n            escaped = false;\n            next = css.indexOf(quote, next + 1);\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos + 1;\n                break;\n              } else {\n                unclosed('string');\n              }\n            }\n            escapePos = next;\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1;\n              escaped = !escaped;\n            }\n          } while (escaped);\n          currentToken = ['string', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n      case AT:\n        {\n          RE_AT_END.lastIndex = pos + 1;\n          RE_AT_END.test(css);\n          if (RE_AT_END.lastIndex === 0) {\n            next = css.length - 1;\n          } else {\n            next = RE_AT_END.lastIndex - 2;\n          }\n          currentToken = ['at-word', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n      case BACKSLASH:\n        {\n          next = pos;\n          escape = true;\n          while (css.charCodeAt(next + 1) === BACKSLASH) {\n            next += 1;\n            escape = !escape;\n          }\n          code = css.charCodeAt(next + 1);\n          if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n            next += 1;\n            if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n              while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n                next += 1;\n              }\n              if (css.charCodeAt(next + 1) === SPACE) {\n                next += 1;\n              }\n            }\n          }\n          currentToken = ['word', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n      default:\n        {\n          if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n            next = css.indexOf('*/', pos + 2) + 1;\n            if (next === 0) {\n              if (ignore || ignoreUnclosed) {\n                next = css.length;\n              } else {\n                unclosed('comment');\n              }\n            }\n            currentToken = ['comment', css.slice(pos, next + 1), pos, next];\n            pos = next;\n          } else {\n            RE_WORD_END.lastIndex = pos + 1;\n            RE_WORD_END.test(css);\n            if (RE_WORD_END.lastIndex === 0) {\n              next = css.length - 1;\n            } else {\n              next = RE_WORD_END.lastIndex - 2;\n            }\n            currentToken = ['word', css.slice(pos, next + 1), pos, next];\n            buffer.push(currentToken);\n            pos = next;\n          }\n          break;\n        }\n    }\n    pos++;\n    return currentToken;\n  }\n  function back(token) {\n    returned.push(token);\n  }\n  return {\n    back,\n    endOfFile,\n    nextToken,\n    position\n  };\n};","map":{"version":3,"names":["SINGLE_QUOTE","charCodeAt","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","module","exports","tokenizer","input","options","css","valueOf","ignore","ignoreErrors","code","content","escape","next","quote","currentToken","escaped","escapePos","n","prev","length","pos","buffer","returned","position","unclosed","what","error","endOfFile","nextToken","opts","pop","ignoreUnclosed","slice","controlChar","String","fromCharCode","indexOf","test","lastIndex","charAt","push","back","token"],"sources":["/Users/zeynepbas/Desktop/stackowerflow/node_modules/postcss/lib/tokenize.js"],"sourcesContent":["'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, content, escape, next, quote\n  let currentToken, escaped, escapePos, n, prev\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    endOfFile,\n    nextToken,\n    position\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}