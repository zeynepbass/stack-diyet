{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst useStore = create(set => ({\n  data: [],\n  // Store the fetched data\n  veri: [],\n  filteredData: [],\n  // Store the filtered data\n  search: \"\",\n  // Store the search term\n  user: JSON.parse(localStorage.getItem(\"user\")),\n  firstName: JSON.parse(localStorage.getItem(\"user\")),\n  // Fetch data from API\n  fetchPost: async () => {\n    try {\n      const response = await axios.get('http://localhost:6078/panel');\n      const fetchedData = response.data;\n\n      // Get the current search term from state and filter the fetched data\n      set(state => {\n        const filteredData = fetchedData.filter(item => item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n        );\n        return {\n          data: fetchedData,\n          filteredData: filteredData // Store the filtered data\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  // Update search term and filter data accordingly\n  setSearch: newSearch => {\n    set(state => {\n      const filteredData = state.data.filter(item => item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n      );\n      return {\n        search: newSearch,\n        filteredData: filteredData // Update filtered data\n      };\n    });\n  },\n  fetchLike: async (postId, incrementValue) => {\n    try {\n      await axios.put(`http://localhost:6078/panel/like/${postId}`);\n      set(state => {\n        const updatedPosts = state.filteredData.map(post => post._id === postId ? {\n          ...post,\n          likeCount: incrementValue\n        } : post);\n        return {\n          filteredData: updatedPosts\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchComment: async formData => {\n    try {\n      // `set` fonksiyonu içerisinde `state` parametresi mevcut\n      set(state => {\n        var _state$user, _state$user$result;\n        const email = (_state$user = state.user) === null || _state$user === void 0 ? void 0 : (_state$user$result = _state$user.result) === null || _state$user$result === void 0 ? void 0 : _state$user$result.firstName; // `state` burada parametre olarak geliyor\n        const emailData = {\n          ...formData,\n          acikla: email // acikla alanına firstName ekleniyor\n        };\n\n        // POST isteği\n        const response = axios.post(\"http://localhost:6078/panel\", emailData); // Use POST if required by the backend\n\n        // Eğer response.data yeni postu içeriyorsa\n        response.then(res => {\n          const newPost = res.data; // response'dan yeni post verisini alıyoruz\n\n          // Filtrelenmiş veriyi güncelliyoruz\n          const updatedFilteredData = [...state.filteredData, newPost]; // Yeni postu ekliyoruz\n\n          return {\n            filteredData: updatedFilteredData // filteredData'yı güncelliyoruz\n          };\n        });\n      });\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchRegister: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n      if (response) {\n        localStorage.setItem(\"firstName\", JSON.stringify(response.data.result.firstName));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchLogin: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n      if (response) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  },\n  fetchSifre: async formData => {\n    try {\n      var _localEmail$result;\n      // localStorage'dan \"user\" bilgilerini al\n      const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n\n      // localEmail objesinin içinde yer alan email alanını al\n      const email = localEmail === null || localEmail === void 0 ? void 0 : (_localEmail$result = localEmail.result) === null || _localEmail$result === void 0 ? void 0 : _localEmail$result.email;\n      if (!email) {\n        console.error(\"Email bilgisi bulunamadı.\");\n        console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n        return;\n      }\n\n      // formData'ya email'i ekle\n      const formDataWithEmail = {\n        ...formData,\n        email\n      };\n      console.log(formDataWithEmail); // Kontrol amacıyla\n\n      const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n      console.log(response); // API'den gelen yanıtı kontrol et\n\n      // API yanıtını kontrol et\n      if (response.data.success) {\n        console.log(\"Şifre güncelleme başarılı.\");\n      } else {\n        console.log(\"Şifre güncellenirken bir hata oluştu.\");\n      }\n    } catch (error) {\n      console.error(\"Hata oluştu:\", error);\n      console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","useStore","set","data","veri","filteredData","search","user","JSON","parse","localStorage","getItem","firstName","fetchPost","response","get","fetchedData","state","filter","item","baslik","toLowerCase","includes","error","console","setSearch","newSearch","fetchLike","postId","incrementValue","put","updatedPosts","map","post","_id","likeCount","fetchComment","formData","_state$user","_state$user$result","email","result","emailData","acikla","then","res","newPost","updatedFilteredData","fetchRegister","setItem","stringify","fetchLogin","fetchSifre","_localEmail$result","localEmail","log","formDataWithEmail","success"],"sources":["/Users/zeynepbas/Documents/GitHub/stack-diyet/client/src/components/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst useStore = create((set) => ({\n    data: [],  // Store the fetched data\n    veri: [],\n    filteredData: [], // Store the filtered data\n    search: \"\", // Store the search term\n    user: JSON.parse(localStorage.getItem(\"user\")),\n    firstName: JSON.parse(localStorage.getItem(\"user\")),\n    // Fetch data from API\n    fetchPost: async () => {\n        try {\n            const response = await axios.get('http://localhost:6078/panel');\n            const fetchedData = response.data;\n\n            // Get the current search term from state and filter the fetched data\n            set((state) => {\n                const filteredData = fetchedData.filter((item) =>\n                    item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n                );\n\n                return {\n                    data: fetchedData,\n                    filteredData: filteredData, // Store the filtered data\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n\n    // Update search term and filter data accordingly\n    setSearch: (newSearch) => {\n        set((state) => {\n            const filteredData = state.data.filter((item) =>\n                item.baslik.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n            );\n            return {\n                search: newSearch,\n                filteredData: filteredData, // Update filtered data\n            };\n        });\n    },\n\n    fetchLike: async (postId, incrementValue) => {\n        try {\n            await axios.put(`http://localhost:6078/panel/like/${postId}`);\n            set((state) => {\n                const updatedPosts = state.filteredData.map((post) =>\n                    post._id === postId ? { ...post, likeCount: incrementValue } : post\n                );\n                return {\n                    filteredData: updatedPosts,\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchComment: async (formData) => {\n        try {\n            // `set` fonksiyonu içerisinde `state` parametresi mevcut\n            set((state) => {\n                const email = state.user?.result?.firstName;  // `state` burada parametre olarak geliyor\n                const emailData = { \n                    ...formData,\n                    acikla: email,  // acikla alanına firstName ekleniyor\n                };\n    \n                // POST isteği\n                const response = axios.post(\"http://localhost:6078/panel\", emailData);  // Use POST if required by the backend\n    \n                // Eğer response.data yeni postu içeriyorsa\n                response.then(res => {\n                    const newPost = res.data; // response'dan yeni post verisini alıyoruz\n    \n                    // Filtrelenmiş veriyi güncelliyoruz\n                    const updatedFilteredData = [...state.filteredData, newPost]; // Yeni postu ekliyoruz\n    \n                    return {\n                        filteredData: updatedFilteredData, // filteredData'yı güncelliyoruz\n                    };\n                });\n            });\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    \n    fetchRegister: async (formData) => {\n     \n        try {\n           const response= await axios.post(\"http://localhost:6078/uye-ol\", formData); // Use POST if required by the backend\n\n        \n           if (response) {\n       \n             localStorage.setItem(\"firstName\", JSON.stringify(response.data.result.firstName));\n           } else {\n             console.error(\"Response data is missing\");\n           }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchLogin: async (formData) => {\n     \n        try {\n     const response=  await axios.post(\"http://localhost:6078/signin\", formData); // Use POST if required by the backend\n     if (response) {\n       \n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else {\n        console.error(\"Response data is missing\");\n      }\n        } catch (error) {\n            console.error('Error submitting comment:', error);\n        }\n    },\n    fetchSifre: async (formData) => {\n        try {\n            // localStorage'dan \"user\" bilgilerini al\n            const localEmail = JSON.parse(localStorage.getItem(\"user\"));\n            \n            // localEmail objesinin içinde yer alan email alanını al\n            const email = localEmail?.result?.email;\n    \n            if (!email) {\n                console.error(\"Email bilgisi bulunamadı.\");\n                console.log('E-posta bilgisi bulunamadı. Lütfen giriş yapın.');\n                return;\n            }\n    \n            // formData'ya email'i ekle\n            const formDataWithEmail = { ...formData, email };\n    \n            console.log(formDataWithEmail); // Kontrol amacıyla\n    \n            const response = await axios.put(\"http://localhost:6078/sifre\", formDataWithEmail);\n            console.log(response);  // API'den gelen yanıtı kontrol et\n            \n            // API yanıtını kontrol et\n            if (response.data.success) {\n                console.log(\"Şifre güncelleme başarılı.\");\n    \n               \n            } else {\n                console.log(\"Şifre güncellenirken bir hata oluştu.\");\n            }\n    \n        } catch (error) {\n            console.error(\"Hata oluştu:\", error);\n            console.log(\"Bir hata oluştu. Lütfen tekrar deneyin.\");\n        }\n    }\n    \n}));\n\nexport default useStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}