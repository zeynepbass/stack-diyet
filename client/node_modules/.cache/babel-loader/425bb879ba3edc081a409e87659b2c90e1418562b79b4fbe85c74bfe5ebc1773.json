{"ast":null,"code":"'use strict';\n\nconst fill = require('fill-range');\nconst stringify = require('./stringify');\nconst utils = require('./utils');\nconst append = (queue = '', stash = '', enclose = false) => {\n  const result = [];\n  queue = [].concat(queue);\n  stash = [].concat(stash);\n  if (!stash.length) return queue;\n  if (!queue.length) {\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\n  }\n  for (const item of queue) {\n    if (Array.isArray(item)) {\n      for (const value of item) {\n        result.push(append(value, stash, enclose));\n      }\n    } else {\n      for (let ele of stash) {\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);\n      }\n    }\n  }\n  return utils.flatten(result);\n};\nconst expand = (ast, options = {}) => {\n  const rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;\n  const walk = (node, parent = {}) => {\n    node.queue = [];\n    let p = parent;\n    let q = parent.queue;\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\n      p = p.parent;\n      q = p.queue;\n    }\n    if (node.invalid || node.dollar) {\n      q.push(append(q.pop(), stringify(node, options)));\n      return;\n    }\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\n      q.push(append(q.pop(), ['{}']));\n      return;\n    }\n    if (node.nodes && node.ranges > 0) {\n      const args = utils.reduce(node.nodes);\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n      }\n      let range = fill(...args, options);\n      if (range.length === 0) {\n        range = stringify(node, options);\n      }\n      q.push(append(q.pop(), range));\n      node.nodes = [];\n      return;\n    }\n    const enclose = utils.encloseBrace(node);\n    let queue = node.queue;\n    let block = node;\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\n      block = block.parent;\n      queue = block.queue;\n    }\n    for (let i = 0; i < node.nodes.length; i++) {\n      const child = node.nodes[i];\n      if (child.type === 'comma' && node.type === 'brace') {\n        if (i === 1) queue.push('');\n        queue.push('');\n        continue;\n      }\n      if (child.type === 'close') {\n        q.push(append(q.pop(), queue, enclose));\n        continue;\n      }\n      if (child.value && child.type !== 'open') {\n        queue.push(append(queue.pop(), child.value));\n        continue;\n      }\n      if (child.nodes) {\n        walk(child, node);\n      }\n    }\n    return queue;\n  };\n  return utils.flatten(walk(ast));\n};\nmodule.exports = expand;","map":{"version":3,"names":["fill","require","stringify","utils","append","queue","stash","enclose","result","concat","length","flatten","map","ele","item","Array","isArray","value","push","expand","ast","options","rangeLimit","undefined","walk","node","parent","p","q","type","invalid","dollar","pop","nodes","ranges","args","reduce","exceedsLimit","step","RangeError","range","encloseBrace","block","i","child","module","exports"],"sources":["/Users/zeynepbas/Desktop/stackowerflow/node_modules/braces/lib/expand.js"],"sourcesContent":["'use strict';\n\nconst fill = require('fill-range');\nconst stringify = require('./stringify');\nconst utils = require('./utils');\n\nconst append = (queue = '', stash = '', enclose = false) => {\n  const result = [];\n\n  queue = [].concat(queue);\n  stash = [].concat(stash);\n\n  if (!stash.length) return queue;\n  if (!queue.length) {\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\n  }\n\n  for (const item of queue) {\n    if (Array.isArray(item)) {\n      for (const value of item) {\n        result.push(append(value, stash, enclose));\n      }\n    } else {\n      for (let ele of stash) {\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);\n      }\n    }\n  }\n  return utils.flatten(result);\n};\n\nconst expand = (ast, options = {}) => {\n  const rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;\n\n  const walk = (node, parent = {}) => {\n    node.queue = [];\n\n    let p = parent;\n    let q = parent.queue;\n\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\n      p = p.parent;\n      q = p.queue;\n    }\n\n    if (node.invalid || node.dollar) {\n      q.push(append(q.pop(), stringify(node, options)));\n      return;\n    }\n\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\n      q.push(append(q.pop(), ['{}']));\n      return;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      const args = utils.reduce(node.nodes);\n\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n      }\n\n      let range = fill(...args, options);\n      if (range.length === 0) {\n        range = stringify(node, options);\n      }\n\n      q.push(append(q.pop(), range));\n      node.nodes = [];\n      return;\n    }\n\n    const enclose = utils.encloseBrace(node);\n    let queue = node.queue;\n    let block = node;\n\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\n      block = block.parent;\n      queue = block.queue;\n    }\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      const child = node.nodes[i];\n\n      if (child.type === 'comma' && node.type === 'brace') {\n        if (i === 1) queue.push('');\n        queue.push('');\n        continue;\n      }\n\n      if (child.type === 'close') {\n        q.push(append(q.pop(), queue, enclose));\n        continue;\n      }\n\n      if (child.value && child.type !== 'open') {\n        queue.push(append(queue.pop(), child.value));\n        continue;\n      }\n\n      if (child.nodes) {\n        walk(child, node);\n      }\n    }\n\n    return queue;\n  };\n\n  return utils.flatten(walk(ast));\n};\n\nmodule.exports = expand;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}