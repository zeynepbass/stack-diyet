{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst useStore = create(set => ({\n  data: [],\n  // Store the fetched data\n  veri: [],\n  filteredData: [],\n  // Store the filtered data\n  search: \"\",\n  // Store the search term\n\n  // Fetch data from API\n  fetchPost: async () => {\n    try {\n      const response = await axios.get('http://localhost:6099/panel');\n      const fetchedData = response.data;\n\n      // Get the current search term from state and filter the fetched data\n      set(state => {\n        const filteredData = fetchedData.filter(item => item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n        );\n        return {\n          data: fetchedData,\n          filteredData: filteredData // Store the filtered data\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  // Update search term and filter data accordingly\n  setSearch: newSearch => {\n    set(state => {\n      const filteredData = state.data.filter(item => item.title.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n      );\n      return {\n        search: newSearch,\n        filteredData: filteredData // Update filtered data\n      };\n    });\n  },\n  fetchLike: async (postId, incrementValue) => {\n    try {\n      await axios.put(`http://localhost:6099/panel/like/${postId}`);\n      set(state => {\n        const updatedPosts = state.data.map(post => post._id === postId ? {\n          ...post,\n          likeCount: incrementValue\n        } : post);\n        return {\n          data: updatedPosts\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  fetchComment: async formData => {\n    try {\n      const response = await axios.post(\"http://localhost:6099/panel\", formData); // Use POST if required by the backend\n      set(state => {\n        const post = response;\n        const updatedData = [...state.filteredData, post]; // Add the new post to the existing data array\n        return {\n          filteredData: updatedData // Return the updated state with 'data' as the key\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","useStore","set","data","veri","filteredData","search","fetchPost","response","get","fetchedData","state","filter","item","baslik","toLowerCase","includes","error","console","setSearch","newSearch","title","fetchLike","postId","incrementValue","put","updatedPosts","map","post","_id","likeCount","fetchComment","formData","updatedData"],"sources":["/Users/zeynepbas/Documents/GitHub/stack-diyet/client/src/components/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst useStore = create((set) => ({\n    data: [],  // Store the fetched data\n    veri: [],\n    filteredData: [], // Store the filtered data\n    search: \"\", // Store the search term\n\n    // Fetch data from API\n    fetchPost: async () => {\n        try {\n            const response = await axios.get('http://localhost:6099/panel');\n            const fetchedData = response.data;\n\n            // Get the current search term from state and filter the fetched data\n            set((state) => {\n                const filteredData = fetchedData.filter((item) =>\n                    item.baslik.toLowerCase().includes(state.search.toLowerCase()) // Use search from state\n                );\n\n                return {\n                    data: fetchedData,\n                    filteredData: filteredData, // Store the filtered data\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n\n    // Update search term and filter data accordingly\n    setSearch: (newSearch) => {\n        set((state) => {\n            const filteredData = state.data.filter((item) =>\n                item.title.toLowerCase().includes(newSearch.toLowerCase()) // Filter based on new search term\n            );\n            return {\n                search: newSearch,\n                filteredData: filteredData, // Update filtered data\n            };\n        });\n    },\n\n    fetchLike: async (postId, incrementValue) => {\n        try {\n            await axios.put(`http://localhost:6099/panel/like/${postId}`);\n            set((state) => {\n                const updatedPosts = state.data.map((post) =>\n                    post._id === postId ? { ...post, likeCount: incrementValue } : post\n                );\n                return {\n                    data: updatedPosts,\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    fetchComment: async (formData) => {\n        try {\n            const response = await axios.post(\"http://localhost:6099/panel\",formData); // Use POST if required by the backend\n            set((state) => {\n                const post = response;\n                const updatedData = [...state.filteredData, post]; // Add the new post to the existing data array\n                return {\n                    filteredData: updatedData, // Return the updated state with 'data' as the key\n                };\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    },\n    \n}));\n\nexport default useStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGF,MAAM,CAAEG,GAAG,KAAM;EAC9BC,IAAI,EAAE,EAAE;EAAG;EACXC,IAAI,EAAE,EAAE;EACRC,YAAY,EAAE,EAAE;EAAE;EAClBC,MAAM,EAAE,EAAE;EAAE;;EAEZ;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACnB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC;MAC/D,MAAMC,WAAW,GAAGF,QAAQ,CAACL,IAAI;;MAEjC;MACAD,GAAG,CAAES,KAAK,IAAK;QACX,MAAMN,YAAY,GAAGK,WAAW,CAACE,MAAM,CAAEC,IAAI,IACzCA,IAAI,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACL,MAAM,CAACS,WAAW,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,OAAO;UACHZ,IAAI,EAAEO,WAAW;UACjBL,YAAY,EAAEA,YAAY,CAAE;QAChC,CAAC;MACL,CAAC,CAAC;IACN,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED;EACAE,SAAS,EAAGC,SAAS,IAAK;IACtBlB,GAAG,CAAES,KAAK,IAAK;MACX,MAAMN,YAAY,GAAGM,KAAK,CAACR,IAAI,CAACS,MAAM,CAAEC,IAAI,IACxCA,IAAI,CAACQ,KAAK,CAACN,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACI,SAAS,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC;MAC/D,CAAC;MACD,OAAO;QACHT,MAAM,EAAEc,SAAS;QACjBf,YAAY,EAAEA,YAAY,CAAE;MAChC,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAEDiB,SAAS,EAAE,MAAAA,CAAOC,MAAM,EAAEC,cAAc,KAAK;IACzC,IAAI;MACA,MAAMxB,KAAK,CAACyB,GAAG,CAAC,oCAAoCF,MAAM,EAAE,CAAC;MAC7DrB,GAAG,CAAES,KAAK,IAAK;QACX,MAAMe,YAAY,GAAGf,KAAK,CAACR,IAAI,CAACwB,GAAG,CAAEC,IAAI,IACrCA,IAAI,CAACC,GAAG,KAAKN,MAAM,GAAG;UAAE,GAAGK,IAAI;UAAEE,SAAS,EAAEN;QAAe,CAAC,GAAGI,IACnE,CAAC;QACD,OAAO;UACHzB,IAAI,EAAEuB;QACV,CAAC;MACL,CAAC,CAAC;IACN,CAAC,CAAC,OAAOT,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EACDc,YAAY,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACA,MAAMxB,QAAQ,GAAG,MAAMR,KAAK,CAAC4B,IAAI,CAAC,6BAA6B,EAACI,QAAQ,CAAC,CAAC,CAAC;MAC3E9B,GAAG,CAAES,KAAK,IAAK;QACX,MAAMiB,IAAI,GAAGpB,QAAQ;QACrB,MAAMyB,WAAW,GAAG,CAAC,GAAGtB,KAAK,CAACN,YAAY,EAAEuB,IAAI,CAAC,CAAC,CAAC;QACnD,OAAO;UACHvB,YAAY,EAAE4B,WAAW,CAAE;QAC/B,CAAC;MACL,CAAC,CAAC;IACN,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ;AAEJ,CAAC,CAAC,CAAC;AAEH,eAAehB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}