{"ast":null,"code":"'use strict';\n\nlet Comment = require('./comment');\nlet Declaration = require('./declaration');\nlet Node = require('./node');\nlet {\n  isClean,\n  my\n} = require('./symbols');\nlet AtRule, parse, Root, Rule;\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\nfunction markTreeDirty(node) {\n  node[isClean] = false;\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markTreeDirty(i);\n    }\n  }\n}\nclass Container extends Node {\n  get first() {\n    if (!this.proxyOf.nodes) return undefined;\n    return this.proxyOf.nodes[0];\n  }\n  get last() {\n    if (!this.proxyOf.nodes) return undefined;\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n  }\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last);\n      for (let node of nodes) this.proxyOf.nodes.push(node);\n    }\n    this.markDirty();\n    return this;\n  }\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween);\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween);\n    }\n  }\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined;\n    let iterator = this.getIterator();\n    let index, result;\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator];\n      result = callback(this.proxyOf.nodes[index], index);\n      if (result === false) break;\n      this.indexes[iterator] += 1;\n    }\n    delete this.indexes[iterator];\n    return result;\n  }\n  every(condition) {\n    return this.nodes.every(condition);\n  }\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0;\n    if (!this.indexes) this.indexes = {};\n    this.lastEach += 1;\n    let iterator = this.lastEach;\n    this.indexes[iterator] = 0;\n    return iterator;\n  }\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node;\n        } else if (!node[prop]) {\n          return node[prop];\n        } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {\n          return (...args) => {\n            return node[prop](...args.map(i => {\n              if (typeof i === 'function') {\n                return (child, index) => i(child.toProxy(), index);\n              } else {\n                return i;\n              }\n            }));\n          };\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) => cb(child.toProxy(), ...other));\n          };\n        } else if (prop === 'root') {\n          return () => node.root().toProxy();\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy());\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy();\n        } else {\n          return node[prop];\n        }\n      },\n      set(node, prop, value) {\n        if (node[prop] === value) return true;\n        node[prop] = value;\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty();\n        }\n        return true;\n      }\n    };\n  }\n  index(child) {\n    if (typeof child === 'number') return child;\n    if (child.proxyOf) child = child.proxyOf;\n    return this.proxyOf.nodes.indexOf(child);\n  }\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist);\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\n    existIndex = this.index(exist);\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node);\n    let index;\n    for (let id in this.indexes) {\n      index = this.indexes[id];\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n    this.markDirty();\n    return this;\n  }\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist);\n    let type = existIndex === 0 ? 'prepend' : false;\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\n    existIndex = this.index(exist);\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node);\n    let index;\n    for (let id in this.indexes) {\n      index = this.indexes[id];\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n    this.markDirty();\n    return this;\n  }\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes);\n    } else if (typeof nodes === 'undefined') {\n      nodes = [];\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0);\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore');\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0);\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore');\n      }\n    } else if (nodes.type) {\n      nodes = [nodes];\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation');\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value);\n      }\n      nodes = [new Declaration(nodes)];\n    } else if (nodes.selector || nodes.selectors) {\n      nodes = [new Rule(nodes)];\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)];\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)];\n    } else {\n      throw new Error('Unknown node type in node creation');\n    }\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i);\n      i = i.proxyOf;\n      if (i.parent) i.parent.removeChild(i);\n      if (i[isClean]) markTreeDirty(i);\n      if (!i.raws) i.raws = {};\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '');\n        }\n      }\n      i.parent = this.proxyOf;\n      return i;\n    });\n    return processed;\n  }\n  prepend(...children) {\n    children = children.reverse();\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse();\n      for (let node of nodes) this.proxyOf.nodes.unshift(node);\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length;\n      }\n    }\n    this.markDirty();\n    return this;\n  }\n  push(child) {\n    child.parent = this;\n    this.proxyOf.nodes.push(child);\n    return this;\n  }\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined;\n    this.proxyOf.nodes = [];\n    this.markDirty();\n    return this;\n  }\n  removeChild(child) {\n    child = this.index(child);\n    this.proxyOf.nodes[child].parent = undefined;\n    this.proxyOf.nodes.splice(child, 1);\n    let index;\n    for (let id in this.indexes) {\n      index = this.indexes[id];\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n    this.markDirty();\n    return this;\n  }\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts;\n      opts = {};\n    }\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return;\n      if (opts.fast && !decl.value.includes(opts.fast)) return;\n      decl.value = decl.value.replace(pattern, callback);\n    });\n    this.markDirty();\n    return this;\n  }\n  some(condition) {\n    return this.nodes.some(condition);\n  }\n  walk(callback) {\n    return this.each((child, i) => {\n      let result;\n      try {\n        result = callback(child, i);\n      } catch (e) {\n        throw child.addToError(e);\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback);\n      }\n      return result;\n    });\n  }\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name;\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i);\n        }\n      });\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i);\n        }\n      });\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i);\n      }\n    });\n  }\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i);\n      }\n    });\n  }\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop;\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i);\n        }\n      });\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i);\n        }\n      });\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i);\n      }\n    });\n  }\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector;\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i);\n        }\n      });\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i);\n        }\n      });\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i);\n      }\n    });\n  }\n}\nContainer.registerParse = dependant => {\n  parse = dependant;\n};\nContainer.registerRule = dependant => {\n  Rule = dependant;\n};\nContainer.registerAtRule = dependant => {\n  AtRule = dependant;\n};\nContainer.registerRoot = dependant => {\n  Root = dependant;\n};\nmodule.exports = Container;\nContainer.default = Container;\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype);\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype);\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype);\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype);\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype);\n  }\n  node[my] = true;\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child);\n    });\n  }\n};\n/* c8 ignore stop */","map":{"version":3,"names":["Comment","require","Declaration","Node","isClean","my","AtRule","parse","Root","Rule","cleanSource","nodes","map","i","source","markTreeDirty","node","proxyOf","Container","first","undefined","last","length","append","children","child","normalize","push","markDirty","cleanRaws","keepBetween","each","callback","iterator","getIterator","index","result","indexes","every","condition","lastEach","getProxyProcessor","get","prop","startsWith","args","toProxy","cb","other","root","set","value","indexOf","insertAfter","exist","add","existIndex","reverse","splice","id","insertBefore","type","sample","Array","isArray","slice","parent","removeChild","Error","String","selector","selectors","name","text","processed","rebuild","raws","before","replace","prepend","unshift","removeAll","replaceValues","pattern","opts","walkDecls","decl","props","includes","fast","some","walk","e","addToError","walkAtRules","RegExp","test","walkComments","walkRules","registerParse","dependant","registerRule","registerAtRule","registerRoot","module","exports","default","Object","setPrototypeOf","prototype","forEach"],"sources":["/Users/zeynepbas/Desktop/stackowerflow/node_modules/postcss/lib/container.js"],"sourcesContent":["'use strict'\n\nlet Comment = require('./comment')\nlet Declaration = require('./declaration')\nlet Node = require('./node')\nlet { isClean, my } = require('./symbols')\n\nlet AtRule, parse, Root, Rule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markTreeDirty(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markTreeDirty(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(\n      add,\n      this.proxyOf.nodes[existIndex],\n      type\n    ).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (typeof nodes === 'undefined') {\n      nodes = []\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector || nodes.selectors) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markTreeDirty(i)\n\n      if (!i.raws) i.raws = {}\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}