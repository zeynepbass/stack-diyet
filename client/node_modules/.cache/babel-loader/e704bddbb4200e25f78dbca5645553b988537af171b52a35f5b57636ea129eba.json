{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  env: function () {\n    return env;\n  },\n  contextMap: function () {\n    return contextMap;\n  },\n  configContextMap: function () {\n    return configContextMap;\n  },\n  contextSourcesMap: function () {\n    return contextSourcesMap;\n  },\n  sourceHashMap: function () {\n    return sourceHashMap;\n  },\n  NOT_ON_DEMAND: function () {\n    return NOT_ON_DEMAND;\n  },\n  NONE: function () {\n    return NONE;\n  },\n  resolveDebug: function () {\n    return resolveDebug;\n  }\n});\nconst env = typeof process !== \"undefined\" ? {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: resolveDebug(process.env.DEBUG)\n} : {\n  NODE_ENV: \"production\",\n  DEBUG: false\n};\nconst contextMap = new Map();\nconst configContextMap = new Map();\nconst contextSourcesMap = new Map();\nconst sourceHashMap = new Map();\nconst NOT_ON_DEMAND = new String(\"*\");\nconst NONE = Symbol(\"__NONE__\");\nfunction resolveDebug(debug) {\n  if (debug === undefined) {\n    return false;\n  }\n  // Environment variables are strings, so convert to boolean\n  if (debug === \"true\" || debug === \"1\") {\n    return true;\n  }\n  if (debug === \"false\" || debug === \"0\") {\n    return false;\n  }\n  // Keep the debug convention into account:\n  // DEBUG=* -> This enables all debug modes\n  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n  if (debug === \"*\") {\n    return true;\n  }\n  let debuggers = debug.split(\",\").map(d => d.split(\":\")[0]);\n  // Ignoring tailwindcss\n  if (debuggers.includes(\"-tailwindcss\")) {\n    return false;\n  }\n  // Including tailwindcss\n  if (debuggers.includes(\"tailwindcss\")) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","env","contextMap","configContextMap","contextSourcesMap","sourceHashMap","NOT_ON_DEMAND","NONE","resolveDebug","process","NODE_ENV","DEBUG","Map","String","Symbol","debug","undefined","debuggers","split","map","d","includes"],"sources":["/Users/zeynepbas/Desktop/stackowerflow/node_modules/tailwindcss/lib/lib/sharedState.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    env: function() {\n        return env;\n    },\n    contextMap: function() {\n        return contextMap;\n    },\n    configContextMap: function() {\n        return configContextMap;\n    },\n    contextSourcesMap: function() {\n        return contextSourcesMap;\n    },\n    sourceHashMap: function() {\n        return sourceHashMap;\n    },\n    NOT_ON_DEMAND: function() {\n        return NOT_ON_DEMAND;\n    },\n    NONE: function() {\n        return NONE;\n    },\n    resolveDebug: function() {\n        return resolveDebug;\n    }\n});\nconst env = typeof process !== \"undefined\" ? {\n    NODE_ENV: process.env.NODE_ENV,\n    DEBUG: resolveDebug(process.env.DEBUG)\n} : {\n    NODE_ENV: \"production\",\n    DEBUG: false\n};\nconst contextMap = new Map();\nconst configContextMap = new Map();\nconst contextSourcesMap = new Map();\nconst sourceHashMap = new Map();\nconst NOT_ON_DEMAND = new String(\"*\");\nconst NONE = Symbol(\"__NONE__\");\nfunction resolveDebug(debug) {\n    if (debug === undefined) {\n        return false;\n    }\n    // Environment variables are strings, so convert to boolean\n    if (debug === \"true\" || debug === \"1\") {\n        return true;\n    }\n    if (debug === \"false\" || debug === \"0\") {\n        return false;\n    }\n    // Keep the debug convention into account:\n    // DEBUG=* -> This enables all debug modes\n    // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n    // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n    // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n    if (debug === \"*\") {\n        return true;\n    }\n    let debuggers = debug.split(\",\").map((d)=>d.split(\":\")[0]);\n    // Ignoring tailwindcss\n    if (debuggers.includes(\"-tailwindcss\")) {\n        return false;\n    }\n    // Including tailwindcss\n    if (debuggers.includes(\"tailwindcss\")) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACF,SAASC,OAAOA,CAACC,MAAM,EAAEC,GAAG,EAAE;EAC1B,KAAI,IAAIC,IAAI,IAAID,GAAG,EAACN,MAAM,CAACC,cAAc,CAACI,MAAM,EAAEE,IAAI,EAAE;IACpDC,UAAU,EAAE,IAAI;IAChBC,GAAG,EAAEH,GAAG,CAACC,IAAI;EACjB,CAAC,CAAC;AACN;AACAH,OAAO,CAACF,OAAO,EAAE;EACbQ,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOA,GAAG;EACd,CAAC;EACDC,UAAU,EAAE,SAAAA,CAAA,EAAW;IACnB,OAAOA,UAAU;EACrB,CAAC;EACDC,gBAAgB,EAAE,SAAAA,CAAA,EAAW;IACzB,OAAOA,gBAAgB;EAC3B,CAAC;EACDC,iBAAiB,EAAE,SAAAA,CAAA,EAAW;IAC1B,OAAOA,iBAAiB;EAC5B,CAAC;EACDC,aAAa,EAAE,SAAAA,CAAA,EAAW;IACtB,OAAOA,aAAa;EACxB,CAAC;EACDC,aAAa,EAAE,SAAAA,CAAA,EAAW;IACtB,OAAOA,aAAa;EACxB,CAAC;EACDC,IAAI,EAAE,SAAAA,CAAA,EAAW;IACb,OAAOA,IAAI;EACf,CAAC;EACDC,YAAY,EAAE,SAAAA,CAAA,EAAW;IACrB,OAAOA,YAAY;EACvB;AACJ,CAAC,CAAC;AACF,MAAMP,GAAG,GAAG,OAAOQ,OAAO,KAAK,WAAW,GAAG;EACzCC,QAAQ,EAAED,OAAO,CAACR,GAAG,CAACS,QAAQ;EAC9BC,KAAK,EAAEH,YAAY,CAACC,OAAO,CAACR,GAAG,CAACU,KAAK;AACzC,CAAC,GAAG;EACAD,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE;AACX,CAAC;AACD,MAAMT,UAAU,GAAG,IAAIU,GAAG,CAAC,CAAC;AAC5B,MAAMT,gBAAgB,GAAG,IAAIS,GAAG,CAAC,CAAC;AAClC,MAAMR,iBAAiB,GAAG,IAAIQ,GAAG,CAAC,CAAC;AACnC,MAAMP,aAAa,GAAG,IAAIO,GAAG,CAAC,CAAC;AAC/B,MAAMN,aAAa,GAAG,IAAIO,MAAM,CAAC,GAAG,CAAC;AACrC,MAAMN,IAAI,GAAGO,MAAM,CAAC,UAAU,CAAC;AAC/B,SAASN,YAAYA,CAACO,KAAK,EAAE;EACzB,IAAIA,KAAK,KAAKC,SAAS,EAAE;IACrB,OAAO,KAAK;EAChB;EACA;EACA,IAAID,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,GAAG,EAAE;IACnC,OAAO,IAAI;EACf;EACA,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,GAAG,EAAE;IACpC,OAAO,KAAK;EAChB;EACA;EACA;EACA;EACA;EACA;EACA,IAAIA,KAAK,KAAK,GAAG,EAAE;IACf,OAAO,IAAI;EACf;EACA,IAAIE,SAAS,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAGA,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1D;EACA,IAAID,SAAS,CAACI,QAAQ,CAAC,cAAc,CAAC,EAAE;IACpC,OAAO,KAAK;EAChB;EACA;EACA,IAAIJ,SAAS,CAACI,QAAQ,CAAC,aAAa,CAAC,EAAE;IACnC,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}